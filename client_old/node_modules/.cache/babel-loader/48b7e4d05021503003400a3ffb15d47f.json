{"ast":null,"code":"var _jsxFileName = \"/home/amar/D/Projects/FlaskProject/ContractingTool/client/src/pages/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport httpClient from \"../httpClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000/\");\n\nconst Chat = () => {\n  _s();\n\n  const [member, setMember] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [message1, setMessage1] = useState([]);\n  const [chat, setChat] = useState([]);\n  const params = useParams();\n  useEffect(() => {\n    socket.on(\"chat\", payload => {\n      setChat([...chat, payload]);\n    });\n    socket.on(\"connect\", function () {\n      socket.emit(\"join_room\", {\n        user: params.userid,\n        room: params.roomid\n      });\n    }); //join room announcement\n    // socket.on(\"join_room_announcement\", function (data) {\n    //   console.log(message1);\n    //   setMessage1([...message1, data.user]);\n    //   // setMessage1([...message1, data.user]);\n    //   // const data = `${payload.user} join the room`;\n    //   // console.log(data);\n    //   // setMessage1(data);\n    // });\n    // (async () => {\n    //   try {\n    //     const res = await httpClient.get(\n    //       `//localhost:5000/contract/api/get_room_members/${params.roomid}`\n    //     );\n    //     // console.log(res.data.response);\n    //     const result = res.data.response;\n    //     const filtered = result.filter((x) => x.user_id === params.userid);\n    //     setMember(filtered);\n    //   } catch (error) {\n    //     console.log(\"No room is available\");\n    //   }\n    // })();\n  });\n\n  const getRoomMemberId = id => {};\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // const roomid = params.roomid;\n    // const roommemberid = member[0].id;\n    // console.log(data);\n\n    socket.emit(\"chat\", {\n      message\n    });\n    setMessage(\"\"); // try {\n    //   const res = await httpClient.post(\n    //     `//localhost:5000/contract/api/addmessage`,\n    //     data\n    //   );\n    // } catch (error) {\n    //   console.log(\"No message available\");\n    // }\n    // setMessage([]);\n    // window.location.reload(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Collaboration Interface\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: message1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: chat && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: chat.map((x, index) => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: x.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"chat\",\n          type: \"text\",\n          placeholder: \"Enter your message\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"mAwC9w1qzVk0kbhV027iNzKn1n0=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/amar/D/Projects/FlaskProject/ContractingTool/client/src/pages/Chat.js"],"names":["React","useState","useEffect","io","useNavigate","useParams","httpClient","socket","Chat","member","setMember","message","setMessage","message1","setMessage1","chat","setChat","params","on","payload","emit","user","userid","room","roomid","getRoomMemberId","id","handleSubmit","e","preventDefault","map","x","index","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport httpClient from \"../httpClient\";\n\nconst socket = io(\"http://127.0.0.1:5000/\");\n\nconst Chat = () => {\n  const [member, setMember] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [message1, setMessage1] = useState([]);\n  const [chat, setChat] = useState([]);\n\n  const params = useParams();\n\n  useEffect(() => {\n    socket.on(\"chat\", (payload) => {\n      setChat([...chat, payload]);\n    });\n\n    socket.on(\"connect\", function () {\n      socket.emit(\"join_room\", {\n        user: params.userid,\n        room: params.roomid,\n      });\n    });\n\n    //join room announcement\n\n    // socket.on(\"join_room_announcement\", function (data) {\n    //   console.log(message1);\n    //   setMessage1([...message1, data.user]);\n    //   // setMessage1([...message1, data.user]);\n    //   // const data = `${payload.user} join the room`;\n    //   // console.log(data);\n    //   // setMessage1(data);\n    // });\n\n    // (async () => {\n    //   try {\n    //     const res = await httpClient.get(\n    //       `//localhost:5000/contract/api/get_room_members/${params.roomid}`\n    //     );\n    //     // console.log(res.data.response);\n    //     const result = res.data.response;\n    //     const filtered = result.filter((x) => x.user_id === params.userid);\n    //     setMember(filtered);\n    //   } catch (error) {\n    //     console.log(\"No room is available\");\n    //   }\n    // })();\n  });\n\n  const getRoomMemberId=(id)=>{\n    \n\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // const roomid = params.roomid;\n    // const roommemberid = member[0].id;\n\n    // console.log(data);\n    socket.emit(\"chat\", { message });\n    setMessage(\"\");\n\n    // try {\n    //   const res = await httpClient.post(\n    //     `//localhost:5000/contract/api/addmessage`,\n    //     data\n    //   );\n    // } catch (error) {\n    //   console.log(\"No message available\");\n    // }\n\n    // setMessage([]);\n    // window.location.reload(false);\n  };\n  return (\n    <div>\n      <h4>Collaboration Interface</h4>\n      <div>{message1}</div>\n      <table>\n        {chat && (\n          <>\n            {chat.map((x, index) => {\n              return (\n                <>\n                  <tr key={index}>\n                    <td>\n                      <p>{x.message}</p>\n                    </td>\n                  </tr>\n                </>\n              );\n            })}\n          </>\n        )}\n      </table>\n\n      <form>\n        <div>\n          <input\n            name=\"chat\"\n            type=\"text\"\n            placeholder=\"Enter your message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <button onClick={handleSubmit}>Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}